package com.lukas.ramonas.cms.DAO;

import com.lukas.ramonas.cms.Model.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.util.Collection;

@Controller // This means that this class is a Controller
@RequestMapping(path="/home") // This means URL's start with /home (after Application path)
public class MainController {
    private UserDto userDto;
    private HttpServletRequest request;
    private Errors errors;
    // This means to get the bean called user_tableRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    @GetMapping("/user/registration")
    public String showRegistrationForm(WebRequest request, Model model) {
        UserDto userDto = new UserDto();
        model.addAttribute("user", userDto);
        return "registration";
    }

    public ModelAndView registerUserAccount(
            @ModelAttribute("user") @Valid UserDto userDto,
            HttpServletRequest request, Errors errors) {
        return null;
    }

    @Autowired
    private UserRepository UserRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (
            @RequestParam String name,
            @RequestParam String username,
            @RequestParam String password,
            @RequestParam String email,
            @RequestParam Collection roles,
            @RequestParam Boolean confirmed) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setUsername(username);
        n.setPassword(password);
        n.setEmail(email);
        n.setRole(roles);
        n.setConfirmed(confirmed);
        UserRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return UserRepository.findAll();
    }

}